#
# COMPLETE BUILD AND DEPLOY WORKFLOW
# Combines your original build job with the new, corrected SSH deploy job.
#
# SECRETS YOU MUST SET IN GITHUB:
# --------------------------------
# VM_HOST:                Public IP of your VM (e.g., 20.17.161.135)
# VM_USER:                Username for your VM (e.g., azureuser)
# VM_SSH_PRIVATE_KEY:     The private SSH key (contents of .pem file)
# SERVICEBUS_CONNECTION:  (You already have this)
# PUBLISH_TOPIC:          (You already have this)
# SCHEDULE_TOPIC:         (You already have this)
#
name: Build and Deploy to Azure VM

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  BACKEND_PATH: 'backend'
  FRONTEND_PATH: 'frontend'
  BACKEND_ARTIFACT_NAME: 'backend-app'
  FRONTEND_ARTIFACT_NAME: 'frontend-app'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Build .NET Backend
      run: dotnet publish ${{ env.BACKEND_PATH }}/servicebusapi2.csproj -c Release --output ${{ env.BACKEND_PATH }}/publish

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Build Frontend
      run: |
        cd ${{ env.FRONTEND_PATH }}
        npm install
        npm run build
        
    - name: Upload Backend Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.BACKEND_ARTIFACT_NAME }}
        path: ${{ env.BACKEND_PATH }}/publish

    - name: Upload Frontend Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.FRONTEND_ARTIFACT_NAME }}
        path: ${{ env.FRONTEND_PATH }}/dist

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download backend artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.BACKEND_ARTIFACT_NAME }}
          path: artifacts/backend-app

      - name: Download frontend artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.FRONTEND_ARTIFACT_NAME }}
          path: artifacts/frontend-app

      - name: Prepare artifact zips
        run: |
          set -euo pipefail
          mkdir -p packaged
          (cd artifacts/backend-app && zip -r ../../packaged/backend.zip .)
          (cd artifacts/frontend-app && zip -r ../../packaged/frontend.zip .)
          echo "backend_zip=packaged/backend.zip" >> $GITHUB_OUTPUT
          echo "frontend_zip=packaged/frontend.zip" >> $GITHUB_OUTPUT
        id: prepare_artifact_zips

      - name: Copy artifacts to VM (SCP)
        uses: appleboy/scp-action@v1.0.0
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
          port: 22
          source: |
            ${{ steps.prepare_artifact_zips.outputs.backend_zip }}
            ${{ steps.prepare_artifact_zips.outputs.frontend_zip }}
          target: /tmp/

      - name: Run deploy script on VM
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
          port: 22
          script: |
            #!/bin/bash
            set -euo pipefail
            echo "==== Starting remote deploy ===="
            # Paths
            BACKEND_ZIP="/tmp/$(basename ${{ steps.prepare_artifact_zips.outputs.backend_zip }})"
            FRONTEND_ZIP="/tmp/$(basename ${{ steps.prepare_artifact_zips.outputs.frontend_zip }})"
            WWW_DIR="/var/www"
            BACKEND_DIR="${WWW_DIR}/backend"
            FRONTEND_DIR="${WWW_DIR}/frontend"

            # Update + essential tools
            sudo apt-get update -y
            sudo apt-get install -y unzip curl nginx dotnet-runtime-8.0

            # Prepare directories
            sudo mkdir -p "${BACKEND_DIR}" "${FRONTEND_DIR}"
            sudo rm -rf "${BACKEND_DIR:?}/"*
            sudo rm -rf "${FRONTEND_DIR:?}/"*

            # Unzip artifacts
            sudo unzip -o "${BACKEND_ZIP}" -d "${BACKEND_DIR}"
            sudo unzip -o "${FRONTEND_ZIP}" -d "${FRONTEND_DIR}"

            # --- Create service env file (restricted permissions) ---
            sudo mkdir -p /etc/servicebus
            sudo chmod 750 /etc/servicebus
            sudo tee /etc/servicebus/service.env > /dev/null <<'ENV'
# Force .NET to run on port 5000 to match Nginx
ASPNETCORE_URLS=http://localhost:5000
SERVICEBUS_CONNECTION='${{ secrets.SERVICEBUS_CONNECTION }}'
PUBLISH_TOPIC='${{ secrets.PUBLISH_TOPIC }}'
SCHEDULE_TOPIC='${{ secrets.SCHEDULE_TOPIC }}'
ENV
            sudo chmod 600 /etc/servicebus/service.env
            sudo chown root:root /etc/servicebus/service.env

            # Append AngularAppUrl (finds public IP)
            PUBLIC_IP=$(curl -s -H Metadata:true "http://169.254.169.254/metadata/instance/network/interface/0/ipv4/ipAddress/0/publicIpAddress?api-version=2021-02-01" || curl -s ifconfig.me || echo "localhost")
            echo "AngularAppUrl=http://${PUBLIC_IP}" | sudo tee -a /etc/servicebus/service.env > /dev/null
            sudo chmod 600 /etc/servicebus/service.env

            # --- Create startup wrapper that finds the DLL dynamically ---
            sudo tee /usr/local/bin/start-servicebus.sh > /dev/null <<'BASH'
#!/bin/bash
set -euo pipefail
cd /var/www/backend
# find the main DLL (e.g., servicebusapi2.dll)
DLL=$(find . -maxdepth 1 -name '*.dll' -exec basename {} \; | head -n 1)
if [ -z "$DLL" ]; then
  echo "ERROR: No .dll found in /var/www/backend" >&2
  exit 1
fi
echo "--- Starting service with $DLL ---"
exec /usr/bin/dotnet "/var/www/backend/$DLL"
BASH
            sudo chmod +x /usr/local/bin/start-servicebus.sh

            # --- Create systemd unit ---
            sudo tee /etc/systemd/system/servicebusapi.service > /dev/null <<'UNIT'
[Unit]
Description=Service Bus API Backend
After=network.target

[Service]
WorkingDirectory=/var/www/backend
ExecStart=/usr/local/bin/start-servicebus.sh
Restart=always
User=www-data
EnvironmentFile=/etc/servicebus/service.env
RestartSec=5

[Install]
WantedBy=multi-user.target
UNIT

            # --- Create nginx config ---
            sudo tee /etc/nginx/sites-available/default > /dev/null <<'NGINX'
server {
    listen 80;
    server_name _;

    # --- Correct path for your frontend files ---
    root /var/www/frontend;
    index index.html;

    location / {
        try_files $uri $uri/ /index.html;
    }

    location /api {
        proxy_pass http://localhost:5000; # Matches ASPNETCORE_URLS
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "keep-alive";
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}
NGINX

            # Permissions and reload services
            sudo chown -R www-data:www-data /var/www
            sudo systemctl daemon-reload
            sudo systemctl enable servicebusapi.service
            sudo systemctl restart servicebusapi.service
            sudo systemctl restart nginx

            echo "==== Remote deploy finished ===="
            echo "Waiting 5s for service to start..."
            sleep 5
            sudo systemctl status servicebusapi.service --no-pager
            sudo journalctl -u servicebusapi.service --since "1 minute ago" --no-pager
