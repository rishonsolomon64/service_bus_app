name: Build and Deploy to Azure VM

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  AZURE_VM_NAME: 'servicebustry'
  AZURE_RESOURCE_GROUP: 'tries'
  BACKEND_PATH: 'backend'
  FRONTEND_PATH: 'frontend'
  BACKEND_ARTIFACT_NAME: 'backend-app'
  FRONTEND_ARTIFACT_NAME: 'frontend-app'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'

    - name: Build .NET Backend
      run: dotnet publish ${{ env.BACKEND_PATH }}/servicebusapi2.csproj -c Release --output ${{ env.BACKEND_PATH }}/publish

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'

    - name: Build Frontend
      run: |
        cd ${{ env.FRONTEND_PATH }}
        npm install
        npm run build

    - name: Upload Backend Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.BACKEND_ARTIFACT_NAME }}
        path: ${{ env.BACKEND_PATH }}/publish

    - name: Upload Frontend Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.FRONTEND_ARTIFACT_NAME }}
        path: ${{ env.FRONTEND_PATH }}/dist

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Log in to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Start VM
      uses: azure/CLI@v1
      with:
        inlineScript: |
          az vm start --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --name ${{ env.AZURE_VM_NAME }}

    - name: Run Setup Script on VM
      uses: azure/CLI@v1
      with:
        inlineScript: |
          # Get the download URLs for the artifacts
          BACKEND_URL=$(curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -H "Accept: application/vnd.github.v3+json" "https://api.github.com/repos/${{ github.repository }}/actions/artifacts" | jq '.artifacts[] | select(.name == "${{ env.BACKEND_ARTIFACT_NAME }}") | .archive_download_url')
          FRONTEND_URL=$(curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -H "Accept: application/vnd.github.v3+json" "https://api.github.com/repos/${{ github.repository }}/actions/artifacts" | jq '.artifacts[] | select(.name == "${{ env.FRONTEND_ARTIFACT_NAME }}") | .archive_download_url')

          # Run the deployment script on the VM
          az vm run-command invoke \
            -g ${{ env.AZURE_RESOURCE_GROUP }} \
            -n ${{ env.AZURE_VM_NAME }} \
            --command-id RunShellScript \
            --scripts "
              #!/bin/bash
              # Install dependencies
              sudo apt-get update && sudo apt-get install -y dotnet-runtime-8.0 nginx unzip jq

              # Download artifacts
              sudo wget -O /tmp/backend.zip \$${BACKEND_URL//\"/}
              sudo wget -O /tmp/frontend.zip \$${FRONTEND_URL//\"/}

              # Prepare directories
              sudo rm -rf /var/www/*
              sudo mkdir -p /var/www/backend /var/www/frontend

              # Unzip artifacts
              sudo unzip -o /tmp/backend.zip -d /var/www/backend
              sudo unzip -o /tmp/frontend.zip -d /var/www/frontend

              # Create backend service file
              echo '[Unit]
              Description=Service Bus API Backend
              [Service]
              WorkingDirectory=/var/www/backend
              ExecStart=/usr/bin/dotnet /var/www/backend/servicebusapi2.dll
              Restart=always
              User=www-data
              Environment=ASPNETCORE_ENVIRONMENT=Production
              Environment=\"SERVICEBUS_CONNECTION=${{ secrets.SERVICEBUS_CONNECTION }}\"
              Environment=\"PUBLISH_TOPIC=${{ secrets.PUBLISH_TOPIC }}\"
              Environment=\"SCHEDULE_TOPIC=${{ secrets.SCHEDULE_TOPIC }}\"
              Environment=\"AngularAppUrl=http://$(curl -s ifconfig.me)\"
              [Install]
              WantedBy=multi-user.target' | sudo tee /etc/systemd/system/servicebusapi.service

              # Create nginx config file
              echo 'server {
                  listen 80;
                  server_name _;
                  root /var/www/frontend;
                  index index.html;
                  location / {
                      try_files \\\$uri \\\$uri/ /index.html;
                  }
                  location /api {
                      proxy_pass http://localhost:5000;
                      proxy_http_version 1.1;
                      proxy_set_header Upgrade \\\$http_upgrade;
                      proxy_set_header Connection keep-alive;
                      proxy_set_header Host \\\$host;
                      proxy_cache_bypass \\\$http_upgrade;
                      proxy_set_header X-Forwarded-For \\\$proxy_add_x_forwarded_for;
                      proxy_set_header X-Forwarded-Proto \\\$scheme;
                  }
              }' | sudo tee /etc/nginx/sites-available/default

              # Set permissions and restart services
              sudo chown -R www-data:www-data /var/www
              sudo systemctl daemon-reload
              sudo systemctl enable servicebusapi.service
              sudo systemctl restart servicebusapi.service
              sudo systemctl restart nginx
            "
    - name: Deallocate VM
      if: always() # This ensures the VM is deallocated even if the script fails
      uses: azure/CLI@v1
      with:
        inlineScript: |
          az vm deallocate --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --name ${{ env.AZURE_VM_NAME }} --no-wait
